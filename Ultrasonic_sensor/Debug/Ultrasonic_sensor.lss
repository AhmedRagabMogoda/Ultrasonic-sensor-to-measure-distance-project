
Ultrasonic_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000974  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000974  000009e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015b8  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f7  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ee6  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00003988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006da  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000df3  00000000  00000000  00004322  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00005115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	b9 00       	.word	0x00b9	; ????
  56:	d2 00       	.word	0x00d2	; ????
  58:	eb 00       	.word	0x00eb	; ????
  5a:	04 01       	movw	r0, r8
  5c:	1c 01       	movw	r2, r24
  5e:	1c 01       	movw	r2, r24
  60:	1c 01       	movw	r2, r24
  62:	1c 01       	movw	r2, r24
  64:	1c 01       	movw	r2, r24
  66:	1c 01       	movw	r2, r24
  68:	1c 01       	movw	r2, r24
  6a:	1c 01       	movw	r2, r24
  6c:	1c 01       	movw	r2, r24
  6e:	1c 01       	movw	r2, r24
  70:	1c 01       	movw	r2, r24
  72:	1c 01       	movw	r2, r24
  74:	1c 01       	movw	r2, r24
  76:	1c 01       	movw	r2, r24
  78:	1c 01       	movw	r2, r24
  7a:	1c 01       	movw	r2, r24
  7c:	1c 01       	movw	r2, r24
  7e:	1c 01       	movw	r2, r24
  80:	1c 01       	movw	r2, r24
  82:	1c 01       	movw	r2, r24
  84:	1c 01       	movw	r2, r24
  86:	1c 01       	movw	r2, r24
  88:	1c 01       	movw	r2, r24
  8a:	1c 01       	movw	r2, r24
  8c:	1c 01       	movw	r2, r24
  8e:	1c 01       	movw	r2, r24
  90:	1c 01       	movw	r2, r24
  92:	1c 01       	movw	r2, r24
  94:	b9 00       	.word	0x00b9	; ????
  96:	d2 00       	.word	0x00d2	; ????
  98:	eb 00       	.word	0x00eb	; ????
  9a:	04 01       	movw	r0, r8
  9c:	29 01       	movw	r4, r18
  9e:	42 01       	movw	r8, r4
  a0:	5b 01       	movw	r10, r22
  a2:	74 01       	movw	r14, r8
  a4:	8c 01       	movw	r16, r24
  a6:	8c 01       	movw	r16, r24
  a8:	8c 01       	movw	r16, r24
  aa:	8c 01       	movw	r16, r24
  ac:	8c 01       	movw	r16, r24
  ae:	8c 01       	movw	r16, r24
  b0:	8c 01       	movw	r16, r24
  b2:	8c 01       	movw	r16, r24
  b4:	8c 01       	movw	r16, r24
  b6:	8c 01       	movw	r16, r24
  b8:	8c 01       	movw	r16, r24
  ba:	8c 01       	movw	r16, r24
  bc:	8c 01       	movw	r16, r24
  be:	8c 01       	movw	r16, r24
  c0:	8c 01       	movw	r16, r24
  c2:	8c 01       	movw	r16, r24
  c4:	8c 01       	movw	r16, r24
  c6:	8c 01       	movw	r16, r24
  c8:	8c 01       	movw	r16, r24
  ca:	8c 01       	movw	r16, r24
  cc:	8c 01       	movw	r16, r24
  ce:	8c 01       	movw	r16, r24
  d0:	8c 01       	movw	r16, r24
  d2:	8c 01       	movw	r16, r24
  d4:	8c 01       	movw	r16, r24
  d6:	8c 01       	movw	r16, r24
  d8:	8c 01       	movw	r16, r24
  da:	8c 01       	movw	r16, r24
  dc:	29 01       	movw	r4, r18
  de:	42 01       	movw	r8, r4
  e0:	5b 01       	movw	r10, r22
  e2:	74 01       	movw	r14, r8
  e4:	9a 01       	movw	r18, r20
  e6:	a1 01       	movw	r20, r2
  e8:	a8 01       	movw	r20, r16
  ea:	af 01       	movw	r20, r30
  ec:	b5 01       	movw	r22, r10
  ee:	b5 01       	movw	r22, r10
  f0:	b5 01       	movw	r22, r10
  f2:	b5 01       	movw	r22, r10
  f4:	b5 01       	movw	r22, r10
  f6:	b5 01       	movw	r22, r10
  f8:	b5 01       	movw	r22, r10
  fa:	b5 01       	movw	r22, r10
  fc:	b5 01       	movw	r22, r10
  fe:	b5 01       	movw	r22, r10
 100:	b5 01       	movw	r22, r10
 102:	b5 01       	movw	r22, r10
 104:	b5 01       	movw	r22, r10
 106:	b5 01       	movw	r22, r10
 108:	b5 01       	movw	r22, r10
 10a:	b5 01       	movw	r22, r10
 10c:	b5 01       	movw	r22, r10
 10e:	b5 01       	movw	r22, r10
 110:	b5 01       	movw	r22, r10
 112:	b5 01       	movw	r22, r10
 114:	b5 01       	movw	r22, r10
 116:	b5 01       	movw	r22, r10
 118:	b5 01       	movw	r22, r10
 11a:	b5 01       	movw	r22, r10
 11c:	b5 01       	movw	r22, r10
 11e:	b5 01       	movw	r22, r10
 120:	b5 01       	movw	r22, r10
 122:	b5 01       	movw	r22, r10
 124:	9a 01       	movw	r18, r20
 126:	a1 01       	movw	r20, r2
 128:	a8 01       	movw	r20, r16
 12a:	af 01       	movw	r20, r30

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	a0 e6       	ldi	r26, 0x60	; 96
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e4 e7       	ldi	r30, 0x74	; 116
 140:	f9 e0       	ldi	r31, 0x09	; 9
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	aa 37       	cpi	r26, 0x7A	; 122
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>
 14e:	0e 94 c5 02 	call	0x58a	; 0x58a <main>
 152:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <DIO_set_pin_dir>:
		PORTC|=value;
		break;
		case 'D':
		case 'd':
		PORTD&=0xf0;
		PORTD|=value;
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	e1 54       	subi	r30, 0x41	; 65
 160:	f1 09       	sbc	r31, r1
 162:	e4 32       	cpi	r30, 0x24	; 36
 164:	f1 05       	cpc	r31, r1
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_set_pin_dir+0x10>
 168:	67 c0       	rjmp	.+206    	; 0x238 <DIO_set_pin_dir+0xde>
 16a:	e6 5d       	subi	r30, 0xD6	; 214
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 a3 04 	jmp	0x946	; 0x946 <__tablejump2__>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	59 f4       	brne	.+22     	; 0x18c <DIO_set_pin_dir+0x32>
 176:	2a b3       	in	r18, 0x1a	; 26
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_set_pin_dir+0x28>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_set_pin_dir+0x24>
 186:	82 2b       	or	r24, r18
 188:	8a bb       	out	0x1a, r24	; 26
 18a:	08 95       	ret
 18c:	2a b3       	in	r18, 0x1a	; 26
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_set_pin_dir+0x3e>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_set_pin_dir+0x3a>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	08 95       	ret
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_set_pin_dir+0x64>
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_set_pin_dir+0x5a>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_set_pin_dir+0x56>
 1b8:	82 2b       	or	r24, r18
 1ba:	87 bb       	out	0x17, r24	; 23
 1bc:	08 95       	ret
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_set_pin_dir+0x70>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_set_pin_dir+0x6c>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	87 bb       	out	0x17, r24	; 23
 1d4:	08 95       	ret
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_set_pin_dir+0x96>
 1da:	24 b3       	in	r18, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_set_pin_dir+0x8c>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_set_pin_dir+0x88>
 1ea:	82 2b       	or	r24, r18
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_set_pin_dir+0xa2>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_set_pin_dir+0x9e>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	84 bb       	out	0x14, r24	; 20
 206:	08 95       	ret
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	59 f4       	brne	.+22     	; 0x222 <DIO_set_pin_dir+0xc8>
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_set_pin_dir+0xbe>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_set_pin_dir+0xba>
 21c:	82 2b       	or	r24, r18
 21e:	81 bb       	out	0x11, r24	; 17
 220:	08 95       	ret
 222:	21 b3       	in	r18, 0x11	; 17
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_set_pin_dir+0xd4>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_set_pin_dir+0xd0>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	81 bb       	out	0x11, r24	; 17
 238:	08 95       	ret

0000023a <DIO_write_pin>:
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	e1 54       	subi	r30, 0x41	; 65
 240:	f1 09       	sbc	r31, r1
 242:	e4 32       	cpi	r30, 0x24	; 36
 244:	f1 05       	cpc	r31, r1
 246:	08 f0       	brcs	.+2      	; 0x24a <DIO_write_pin+0x10>
 248:	67 c0       	rjmp	.+206    	; 0x318 <DIO_write_pin+0xde>
 24a:	e2 5b       	subi	r30, 0xB2	; 178
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	0c 94 a3 04 	jmp	0x946	; 0x946 <__tablejump2__>
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <DIO_write_pin+0x32>
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write_pin+0x28>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write_pin+0x24>
 266:	82 2b       	or	r24, r18
 268:	8b bb       	out	0x1b, r24	; 27
 26a:	08 95       	ret
 26c:	2b b3       	in	r18, 0x1b	; 27
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_write_pin+0x3e>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_write_pin+0x3a>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	8b bb       	out	0x1b, r24	; 27
 282:	08 95       	ret
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	59 f4       	brne	.+22     	; 0x29e <DIO_write_pin+0x64>
 288:	28 b3       	in	r18, 0x18	; 24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_write_pin+0x5a>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_write_pin+0x56>
 298:	82 2b       	or	r24, r18
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	08 95       	ret
 29e:	28 b3       	in	r18, 0x18	; 24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write_pin+0x70>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write_pin+0x6c>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	08 95       	ret
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <DIO_write_pin+0x96>
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_write_pin+0x8c>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_write_pin+0x88>
 2ca:	82 2b       	or	r24, r18
 2cc:	85 bb       	out	0x15, r24	; 21
 2ce:	08 95       	ret
 2d0:	25 b3       	in	r18, 0x15	; 21
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_write_pin+0xa2>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_write_pin+0x9e>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	85 bb       	out	0x15, r24	; 21
 2e6:	08 95       	ret
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	59 f4       	brne	.+22     	; 0x302 <DIO_write_pin+0xc8>
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write_pin+0xbe>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write_pin+0xba>
 2fc:	82 2b       	or	r24, r18
 2fe:	82 bb       	out	0x12, r24	; 18
 300:	08 95       	ret
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_write_pin+0xd4>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_write_pin+0xd0>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	82 bb       	out	0x12, r24	; 18
 318:	08 95       	ret

0000031a <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char port,unsigned char number)
{
	number<<=4;
 31a:	62 95       	swap	r22
 31c:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	e1 54       	subi	r30, 0x41	; 65
 324:	f1 09       	sbc	r31, r1
 326:	e4 32       	cpi	r30, 0x24	; 36
 328:	f1 05       	cpc	r31, r1
 32a:	f8 f4       	brcc	.+62     	; 0x36a <DIO_write_high_nibble+0x50>
 32c:	ee 58       	subi	r30, 0x8E	; 142
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	0c 94 a3 04 	jmp	0x946	; 0x946 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA&=0x0F;
 334:	8b b3       	in	r24, 0x1b	; 27
 336:	8f 70       	andi	r24, 0x0F	; 15
 338:	8b bb       	out	0x1b, r24	; 27
		PORTA|=number;
 33a:	8b b3       	in	r24, 0x1b	; 27
 33c:	68 2b       	or	r22, r24
 33e:	6b bb       	out	0x1b, r22	; 27
		break;
 340:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0x0F;
 342:	88 b3       	in	r24, 0x18	; 24
 344:	8f 70       	andi	r24, 0x0F	; 15
 346:	88 bb       	out	0x18, r24	; 24
		PORTB|=number;
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	68 2b       	or	r22, r24
 34c:	68 bb       	out	0x18, r22	; 24
		break;
 34e:	08 95       	ret
		case 'C':
		case 'c':
		PORTC&=0x0F;
 350:	85 b3       	in	r24, 0x15	; 21
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	85 bb       	out	0x15, r24	; 21
		PORTC|=number;
 356:	85 b3       	in	r24, 0x15	; 21
 358:	68 2b       	or	r22, r24
 35a:	65 bb       	out	0x15, r22	; 21
		break;
 35c:	08 95       	ret
		case 'D':
		case 'd':
		PORTD&=0x0F;
 35e:	82 b3       	in	r24, 0x12	; 18
 360:	8f 70       	andi	r24, 0x0F	; 15
 362:	82 bb       	out	0x12, r24	; 18
		PORTD|=number;
 364:	82 b3       	in	r24, 0x12	; 18
 366:	68 2b       	or	r22, r24
 368:	62 bb       	out	0x12, r22	; 18
 36a:	08 95       	ret

0000036c <enable>:
	#endif
}

static void enable(void)
{
	DIO_write_pin(PORT_2,EN,1);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	82 e4       	ldi	r24, 0x42	; 66
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	9f e0       	ldi	r25, 0x0F	; 15
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <enable+0x14>
 384:	00 c0       	rjmp	.+0      	; 0x386 <enable+0x1a>
 386:	00 00       	nop
	_delay_ms(2);
	DIO_write_pin(PORT_2,EN,0);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	82 e4       	ldi	r24, 0x42	; 66
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
 398:	8f e9       	ldi	r24, 0x9F	; 159
 39a:	9f e0       	ldi	r25, 0x0F	; 15
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <enable+0x30>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <enable+0x36>
 3a2:	00 00       	nop
 3a4:	08 95       	ret

000003a6 <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,0);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	82 e4       	ldi	r24, 0x42	; 66
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,cmd);
	enable();
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,cmd>>4);
 3ba:	6c 2f       	mov	r22, r28
 3bc:	62 95       	swap	r22
 3be:	6f 70       	andi	r22, 0x0F	; 15
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	81 e4       	ldi	r24, 0x41	; 65
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 3ca:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
	DIO_write_high_nibble(PORT_1,cmd);
 3ce:	6c 2f       	mov	r22, r28
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	81 e4       	ldi	r24, 0x41	; 65
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 3da:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
 3de:	8f ec       	ldi	r24, 0xCF	; 207
 3e0:	97 e0       	ldi	r25, 0x07	; 7
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_send_cmd+0x3c>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <LCD_send_cmd+0x42>
 3e8:	00 00       	nop
	#endif
	_delay_ms(1);
}
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <LCD_init>:
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	81 ee       	ldi	r24, 0xE1	; 225
 3f2:	94 e0       	ldi	r25, 0x04	; 4
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <LCD_init+0x6>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_init+0x10>
 3fe:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_set_pin_dir(PORT_1,4,1);
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	81 e4       	ldi	r24, 0x41	; 65
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,5,1);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	65 e0       	ldi	r22, 0x05	; 5
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	81 e4       	ldi	r24, 0x41	; 65
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,6,1);
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	66 e0       	ldi	r22, 0x06	; 6
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	81 e4       	ldi	r24, 0x41	; 65
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,7,1);
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	67 e0       	ldi	r22, 0x07	; 7
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	81 e4       	ldi	r24, 0x41	; 65
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,EN,1);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	82 e4       	ldi	r24, 0x42	; 66
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RW,1);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	82 e4       	ldi	r24, 0x42	; 66
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RS,1);
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	82 e4       	ldi	r24, 0x42	; 66
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_write_pin(PORT_2,RW,0);	
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	82 e4       	ldi	r24, 0x42	; 66
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	
	LCD_send_cmd(RETURN_HOME); //4_bits_mode //return home
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 486:	8f e1       	ldi	r24, 0x1F	; 31
 488:	9e e4       	ldi	r25, 0x4E	; 78
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BITS);  //4_bits_mode
 492:	88 e2       	ldi	r24, 0x28	; 40
 494:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 498:	8f ec       	ldi	r24, 0xCF	; 207
 49a:	97 e0       	ldi	r25, 0x07	; 7
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);  //clear screen
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 4aa:	8f e1       	ldi	r24, 0x1F	; 31
 4ac:	9e e4       	ldi	r25, 0x4E	; 78
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(CURSOR_Off_DISPLAY_ON); //curson on, display on
 4b6:	8c e0       	ldi	r24, 0x0C	; 12
 4b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 4bc:	8f ec       	ldi	r24, 0xCF	; 207
 4be:	97 e0       	ldi	r25, 0x07	; 7
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c6:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
 4c8:	86 e0       	ldi	r24, 0x06	; 6
 4ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 4ce:	8f ec       	ldi	r24, 0xCF	; 207
 4d0:	97 e0       	ldi	r25, 0x07	; 7
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d8:	00 00       	nop
 4da:	08 95       	ret

000004dc <LCD_send_data>:
	#endif
	_delay_ms(1);
}

void LCD_send_data(char data)
{
 4dc:	cf 93       	push	r28
 4de:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,1);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	82 e4       	ldi	r24, 0x42	; 66
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,data);
	enable();
	
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,data>>4);
 4f0:	6c 2f       	mov	r22, r28
 4f2:	62 95       	swap	r22
 4f4:	6f 70       	andi	r22, 0x0F	; 15
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	81 e4       	ldi	r24, 0x41	; 65
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 500:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
	DIO_write_high_nibble(PORT_1,data);
 504:	6c 2f       	mov	r22, r28
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	81 e4       	ldi	r24, 0x41	; 65
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 510:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
	#endif
	
}
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <LCD_send_string>:

void LCD_send_string(char* string)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
	while((*string!='\0'))
 51e:	03 c0       	rjmp	.+6      	; 0x526 <LCD_send_string+0xe>
	{
		LCD_send_data(*string);
 520:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_send_data>
		string++;
 524:	21 96       	adiw	r28, 0x01	; 1
	
}

void LCD_send_string(char* string)
{
	while((*string!='\0'))
 526:	88 81       	ld	r24, Y
 528:	81 11       	cpse	r24, r1
 52a:	fa cf       	rjmp	.-12     	; 0x520 <LCD_send_string+0x8>
	{
		LCD_send_data(*string);
		string++;
	}
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 538:	8f e1       	ldi	r24, 0x1F	; 31
 53a:	9e e4       	ldi	r25, 0x4E	; 78
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <LCD_clr_screen+0xa>
 540:	00 c0       	rjmp	.+0      	; 0x542 <LCD_clr_screen+0x10>
 542:	00 00       	nop
 544:	08 95       	ret

00000546 <LCD_move_cursor>:
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	98 0f       	add	r25, r24
 54a:	92 30       	cpi	r25, 0x02	; 2
 54c:	70 f4       	brcc	.+28     	; 0x56a <LCD_move_cursor+0x24>
 54e:	61 31       	cpi	r22, 0x11	; 17
 550:	70 f4       	brcc	.+28     	; 0x56e <LCD_move_cursor+0x28>
 552:	66 23       	and	r22, r22
 554:	71 f0       	breq	.+28     	; 0x572 <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if (row==1)
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	19 f4       	brne	.+6      	; 0x560 <LCD_move_cursor+0x1a>
	{
		data=(0x80+coloum-1);
 55a:	8f e7       	ldi	r24, 0x7F	; 127
 55c:	86 0f       	add	r24, r22
 55e:	0c c0       	rjmp	.+24     	; 0x578 <LCD_move_cursor+0x32>
	}
	else if (row==2)
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	49 f4       	brne	.+18     	; 0x576 <LCD_move_cursor+0x30>
	{
		data=(0xC0+coloum-1);
 564:	8f eb       	ldi	r24, 0xBF	; 191
 566:	86 0f       	add	r24, r22
 568:	07 c0       	rjmp	.+14     	; 0x578 <LCD_move_cursor+0x32>
void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
	{
		data=0x80;
 56a:	80 e8       	ldi	r24, 0x80	; 128
 56c:	05 c0       	rjmp	.+10     	; 0x578 <LCD_move_cursor+0x32>
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	03 c0       	rjmp	.+6      	; 0x578 <LCD_move_cursor+0x32>
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	01 c0       	rjmp	.+2      	; 0x578 <LCD_move_cursor+0x32>
	_delay_ms(10);
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
 576:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=(0xC0+coloum-1);
	}
	LCD_send_cmd(data);
 578:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_send_cmd>
 57c:	8f ec       	ldi	r24, 0xCF	; 207
 57e:	97 e0       	ldi	r25, 0x07	; 7
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <LCD_move_cursor+0x3a>
 584:	00 c0       	rjmp	.+0      	; 0x586 <LCD_move_cursor+0x40>
 586:	00 00       	nop
 588:	08 95       	ret

0000058a <main>:
#define prescaling 1
#define speed_of_sound 34600 // 346 M/S = 34600 CM/S

int main(void)
{
   LCD_init();
 58a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LCD_init>
   SET_BIT(DDRD,PD0);
 58e:	81 b3       	in	r24, 0x11	; 17
 590:	81 60       	ori	r24, 0x01	; 1
 592:	81 bb       	out	0x11, r24	; 17
   unsigned short rasing_value,failing_value;
   unsigned short on_pulse,distance;
   float time_on_pulse;
    while (1) 
    {
		SET_BIT(PORTD,PD0); //trigger to start
 594:	82 b3       	in	r24, 0x12	; 18
 596:	81 60       	ori	r24, 0x01	; 1
 598:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59a:	23 e0       	ldi	r18, 0x03	; 3
 59c:	2a 95       	dec	r18
 59e:	f1 f7       	brne	.-4      	; 0x59c <main+0x12>
 5a0:	00 00       	nop
		_delay_us(10);
		CLR_BIT(PORTD,PD0);
 5a2:	82 b3       	in	r24, 0x12	; 18
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	82 bb       	out	0x12, r24	; 18
		TIMER1_ICU_init();
 5a8:	0e 94 3d 03 	call	0x67a	; 0x67a <TIMER1_ICU_init>
		rasing_value=TIMER1_ICU_raising();
 5ac:	0e 94 5f 03 	call	0x6be	; 0x6be <TIMER1_ICU_raising>
 5b0:	7c 01       	movw	r14, r24
		failing_value=TIMER1_ICU_failing();
 5b2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <TIMER1_ICU_failing>
 5b6:	ec 01       	movw	r28, r24
		TIMER1_stop_ICU();
 5b8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TIMER1_stop_ICU>
		on_pulse=failing_value-rasing_value;
 5bc:	be 01       	movw	r22, r28
 5be:	6e 19       	sub	r22, r14
 5c0:	7f 09       	sbc	r23, r15
		time_on_pulse=on_pulse*((float)prescaling/F_CPU);
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 a8 03 	call	0x750	; 0x750 <__floatunsisf>
 5ca:	2d eb       	ldi	r18, 0xBD	; 189
 5cc:	37 e3       	ldi	r19, 0x37	; 55
 5ce:	46 e8       	ldi	r20, 0x86	; 134
 5d0:	55 e3       	ldi	r21, 0x35	; 53
 5d2:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
		distance=(speed_of_sound*time_on_pulse)/2; // CM
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	38 e2       	ldi	r19, 0x28	; 40
 5da:	47 e0       	ldi	r20, 0x07	; 7
 5dc:	57 e4       	ldi	r21, 0x47	; 71
 5de:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	5f e3       	ldi	r21, 0x3F	; 63
 5ea:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 5ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixunssfsi>
 5f2:	6b 01       	movw	r12, r22
 5f4:	7c 01       	movw	r14, r24
		if (distance>80)
 5f6:	81 e5       	ldi	r24, 0x51	; 81
 5f8:	c8 16       	cp	r12, r24
 5fa:	d1 04       	cpc	r13, r1
 5fc:	80 f0       	brcs	.+32     	; 0x61e <main+0x94>
		{
			LCD_clr_screen();
 5fe:	0e 94 99 02 	call	0x532	; 0x532 <LCD_clr_screen>
			LCD_send_string("  No object");
 602:	80 e6       	ldi	r24, 0x60	; 96
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60a:	9f e3       	ldi	r25, 0x3F	; 63
 60c:	2d e0       	ldi	r18, 0x0D	; 13
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	91 50       	subi	r25, 0x01	; 1
 612:	20 40       	sbci	r18, 0x00	; 0
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x86>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x90>
 61a:	00 00       	nop
 61c:	bb cf       	rjmp	.-138    	; 0x594 <main+0xa>
			_delay_ms(1000);
		}
		else
		{
			LCD_move_cursor(1,1);
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_move_cursor>
			LCD_send_string("distance=");
 626:	8c e6       	ldi	r24, 0x6C	; 108
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_send_string>
			LCD_send_data(distance/10+48);
 62e:	96 01       	movw	r18, r12
 630:	ad ec       	ldi	r26, 0xCD	; 205
 632:	bc ec       	ldi	r27, 0xCC	; 204
 634:	0e 94 a9 04 	call	0x952	; 0x952 <__umulhisi3>
 638:	ec 01       	movw	r28, r24
 63a:	d6 95       	lsr	r29
 63c:	c7 95       	ror	r28
 63e:	d6 95       	lsr	r29
 640:	c7 95       	ror	r28
 642:	d6 95       	lsr	r29
 644:	c7 95       	ror	r28
 646:	8c 2f       	mov	r24, r28
 648:	80 5d       	subi	r24, 0xD0	; 208
 64a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_send_data>
			LCD_send_data(distance%10+48);
 64e:	ce 01       	movw	r24, r28
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	cc 0f       	add	r28, r28
 656:	dd 1f       	adc	r29, r29
 658:	cc 0f       	add	r28, r28
 65a:	dd 1f       	adc	r29, r29
 65c:	cc 0f       	add	r28, r28
 65e:	dd 1f       	adc	r29, r29
 660:	c8 0f       	add	r28, r24
 662:	d9 1f       	adc	r29, r25
 664:	c6 01       	movw	r24, r12
 666:	8c 1b       	sub	r24, r28
 668:	9d 0b       	sbc	r25, r29
 66a:	80 5d       	subi	r24, 0xD0	; 208
 66c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_send_data>
			LCD_send_string("cm");
 670:	86 e7       	ldi	r24, 0x76	; 118
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_send_string>
 678:	8d cf       	rjmp	.-230    	; 0x594 <main+0xa>

0000067a <TIMER1_ICU_init>:
}

void TIMER1_ICU_init(void)
{
	//determine normal mode
	CLR_BIT(TCCR1A,WGM10);
 67a:	8f b5       	in	r24, 0x2f	; 47
 67c:	8e 7f       	andi	r24, 0xFE	; 254
 67e:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,WGM11);
 680:	8f b5       	in	r24, 0x2f	; 47
 682:	8d 7f       	andi	r24, 0xFD	; 253
 684:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1B,WGM12);
 686:	8e b5       	in	r24, 0x2e	; 46
 688:	87 7f       	andi	r24, 0xF7	; 247
 68a:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,WGM13);
 68c:	8e b5       	in	r24, 0x2e	; 46
 68e:	8f 7e       	andi	r24, 0xEF	; 239
 690:	8e bd       	out	0x2e, r24	; 46
	//determine prescaler=1, timer1_clock=(cpu_clock/prescaler)
	SET_BIT(TCCR1B,CS10);
 692:	8e b5       	in	r24, 0x2e	; 46
 694:	81 60       	ori	r24, 0x01	; 1
 696:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
 698:	8e b5       	in	r24, 0x2e	; 46
 69a:	8d 7f       	andi	r24, 0xFD	; 253
 69c:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
 69e:	8e b5       	in	r24, 0x2e	; 46
 6a0:	8b 7f       	andi	r24, 0xFB	; 251
 6a2:	8e bd       	out	0x2e, r24	; 46
	//set ICP1 as input pin to received wave
	CLR_BIT(DDRD,PD6);
 6a4:	81 b3       	in	r24, 0x11	; 17
 6a6:	8f 7b       	andi	r24, 0xBF	; 191
 6a8:	81 bb       	out	0x11, r24	; 17
	//filter noise on input capure pin
	SET_BIT(TCCR1B,ICNC1);
 6aa:	8e b5       	in	r24, 0x2e	; 46
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	8e bd       	out	0x2e, r24	; 46
	//clear flag
	SET_BIT(TIFR,ICF1); 
 6b0:	88 b7       	in	r24, 0x38	; 56
 6b2:	80 62       	ori	r24, 0x20	; 32
 6b4:	88 bf       	out	0x38, r24	; 56
 6b6:	08 95       	ret

000006b8 <TIMER1_stop_ICU>:
}

void TIMER1_stop_ICU(void)
{
	TCCR1A=0;
 6b8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0;
 6ba:	1e bc       	out	0x2e, r1	; 46
 6bc:	08 95       	ret

000006be <TIMER1_ICU_raising>:

unsigned short TIMER1_ICU_raising(void)
{
	unsigned short val;
	//take capure when raising
	SET_BIT(TCCR1B,ICES1);
 6be:	8e b5       	in	r24, 0x2e	; 46
 6c0:	80 64       	ori	r24, 0x40	; 64
 6c2:	8e bd       	out	0x2e, r24	; 46
	// Wait for capture event and Read ICR1
	while(READ_BIT(TIFR,ICF1)==0);
 6c4:	08 b6       	in	r0, 0x38	; 56
 6c6:	05 fe       	sbrs	r0, 5
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <TIMER1_ICU_raising+0x6>
	val=ICR1;
 6ca:	26 b5       	in	r18, 0x26	; 38
 6cc:	37 b5       	in	r19, 0x27	; 39
	SET_BIT(TIFR,ICF1); //clear flag
 6ce:	98 b7       	in	r25, 0x38	; 56
 6d0:	90 62       	ori	r25, 0x20	; 32
 6d2:	98 bf       	out	0x38, r25	; 56
	return val;
	/*
	timer_tick_time=(1/timer1_clock)
	*/
}
 6d4:	c9 01       	movw	r24, r18
 6d6:	08 95       	ret

000006d8 <TIMER1_ICU_failing>:

unsigned short TIMER1_ICU_failing(void)
{
	unsigned short val;
	//take capure when failing
	CLR_BIT(TCCR1B,ICES1);
 6d8:	8e b5       	in	r24, 0x2e	; 46
 6da:	8f 7b       	andi	r24, 0xBF	; 191
 6dc:	8e bd       	out	0x2e, r24	; 46
	// Wait for capture event and Read ICR1
	while(READ_BIT(TIFR,ICF1)==0);
 6de:	08 b6       	in	r0, 0x38	; 56
 6e0:	05 fe       	sbrs	r0, 5
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <TIMER1_ICU_failing+0x6>
	val=ICR1;
 6e4:	26 b5       	in	r18, 0x26	; 38
 6e6:	37 b5       	in	r19, 0x27	; 39
	SET_BIT(TIFR,ICF1); //clear flag
 6e8:	98 b7       	in	r25, 0x38	; 56
 6ea:	90 62       	ori	r25, 0x20	; 32
 6ec:	98 bf       	out	0x38, r25	; 56
	return val;
	/*
	timer_tick_time=(1/timer1_clock)
	*/
}
 6ee:	c9 01       	movw	r24, r18
 6f0:	08 95       	ret

000006f2 <__fixunssfsi>:
 6f2:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_splitA>
 6f6:	88 f0       	brcs	.+34     	; 0x71a <__fixunssfsi+0x28>
 6f8:	9f 57       	subi	r25, 0x7F	; 127
 6fa:	98 f0       	brcs	.+38     	; 0x722 <__fixunssfsi+0x30>
 6fc:	b9 2f       	mov	r27, r25
 6fe:	99 27       	eor	r25, r25
 700:	b7 51       	subi	r27, 0x17	; 23
 702:	b0 f0       	brcs	.+44     	; 0x730 <__fixunssfsi+0x3e>
 704:	e1 f0       	breq	.+56     	; 0x73e <__fixunssfsi+0x4c>
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	1a f0       	brmi	.+6      	; 0x716 <__fixunssfsi+0x24>
 710:	ba 95       	dec	r27
 712:	c9 f7       	brne	.-14     	; 0x706 <__fixunssfsi+0x14>
 714:	14 c0       	rjmp	.+40     	; 0x73e <__fixunssfsi+0x4c>
 716:	b1 30       	cpi	r27, 0x01	; 1
 718:	91 f0       	breq	.+36     	; 0x73e <__fixunssfsi+0x4c>
 71a:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_zero>
 71e:	b1 e0       	ldi	r27, 0x01	; 1
 720:	08 95       	ret
 722:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_zero>
 726:	67 2f       	mov	r22, r23
 728:	78 2f       	mov	r23, r24
 72a:	88 27       	eor	r24, r24
 72c:	b8 5f       	subi	r27, 0xF8	; 248
 72e:	39 f0       	breq	.+14     	; 0x73e <__fixunssfsi+0x4c>
 730:	b9 3f       	cpi	r27, 0xF9	; 249
 732:	cc f3       	brlt	.-14     	; 0x726 <__fixunssfsi+0x34>
 734:	86 95       	lsr	r24
 736:	77 95       	ror	r23
 738:	67 95       	ror	r22
 73a:	b3 95       	inc	r27
 73c:	d9 f7       	brne	.-10     	; 0x734 <__fixunssfsi+0x42>
 73e:	3e f4       	brtc	.+14     	; 0x74e <__fixunssfsi+0x5c>
 740:	90 95       	com	r25
 742:	80 95       	com	r24
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__floatunsisf>:
 750:	e8 94       	clt
 752:	09 c0       	rjmp	.+18     	; 0x766 <__floatsisf+0x12>

00000754 <__floatsisf>:
 754:	97 fb       	bst	r25, 7
 756:	3e f4       	brtc	.+14     	; 0x766 <__floatsisf+0x12>
 758:	90 95       	com	r25
 75a:	80 95       	com	r24
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	99 23       	and	r25, r25
 768:	a9 f0       	breq	.+42     	; 0x794 <__floatsisf+0x40>
 76a:	f9 2f       	mov	r31, r25
 76c:	96 e9       	ldi	r25, 0x96	; 150
 76e:	bb 27       	eor	r27, r27
 770:	93 95       	inc	r25
 772:	f6 95       	lsr	r31
 774:	87 95       	ror	r24
 776:	77 95       	ror	r23
 778:	67 95       	ror	r22
 77a:	b7 95       	ror	r27
 77c:	f1 11       	cpse	r31, r1
 77e:	f8 cf       	rjmp	.-16     	; 0x770 <__floatsisf+0x1c>
 780:	fa f4       	brpl	.+62     	; 0x7c0 <__floatsisf+0x6c>
 782:	bb 0f       	add	r27, r27
 784:	11 f4       	brne	.+4      	; 0x78a <__floatsisf+0x36>
 786:	60 ff       	sbrs	r22, 0
 788:	1b c0       	rjmp	.+54     	; 0x7c0 <__floatsisf+0x6c>
 78a:	6f 5f       	subi	r22, 0xFF	; 255
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	16 c0       	rjmp	.+44     	; 0x7c0 <__floatsisf+0x6c>
 794:	88 23       	and	r24, r24
 796:	11 f0       	breq	.+4      	; 0x79c <__floatsisf+0x48>
 798:	96 e9       	ldi	r25, 0x96	; 150
 79a:	11 c0       	rjmp	.+34     	; 0x7be <__floatsisf+0x6a>
 79c:	77 23       	and	r23, r23
 79e:	21 f0       	breq	.+8      	; 0x7a8 <__floatsisf+0x54>
 7a0:	9e e8       	ldi	r25, 0x8E	; 142
 7a2:	87 2f       	mov	r24, r23
 7a4:	76 2f       	mov	r23, r22
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <__floatsisf+0x5e>
 7a8:	66 23       	and	r22, r22
 7aa:	71 f0       	breq	.+28     	; 0x7c8 <__floatsisf+0x74>
 7ac:	96 e8       	ldi	r25, 0x86	; 134
 7ae:	86 2f       	mov	r24, r22
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	2a f0       	brmi	.+10     	; 0x7c0 <__floatsisf+0x6c>
 7b6:	9a 95       	dec	r25
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	da f7       	brpl	.-10     	; 0x7b6 <__floatsisf+0x62>
 7c0:	88 0f       	add	r24, r24
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret

000007ca <__fp_split3>:
 7ca:	57 fd       	sbrc	r21, 7
 7cc:	90 58       	subi	r25, 0x80	; 128
 7ce:	44 0f       	add	r20, r20
 7d0:	55 1f       	adc	r21, r21
 7d2:	59 f0       	breq	.+22     	; 0x7ea <__fp_splitA+0x10>
 7d4:	5f 3f       	cpi	r21, 0xFF	; 255
 7d6:	71 f0       	breq	.+28     	; 0x7f4 <__fp_splitA+0x1a>
 7d8:	47 95       	ror	r20

000007da <__fp_splitA>:
 7da:	88 0f       	add	r24, r24
 7dc:	97 fb       	bst	r25, 7
 7de:	99 1f       	adc	r25, r25
 7e0:	61 f0       	breq	.+24     	; 0x7fa <__fp_splitA+0x20>
 7e2:	9f 3f       	cpi	r25, 0xFF	; 255
 7e4:	79 f0       	breq	.+30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e6:	87 95       	ror	r24
 7e8:	08 95       	ret
 7ea:	12 16       	cp	r1, r18
 7ec:	13 06       	cpc	r1, r19
 7ee:	14 06       	cpc	r1, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	f2 cf       	rjmp	.-28     	; 0x7d8 <__fp_split3+0xe>
 7f4:	46 95       	lsr	r20
 7f6:	f1 df       	rcall	.-30     	; 0x7da <__fp_splitA>
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	16 16       	cp	r1, r22
 7fc:	17 06       	cpc	r1, r23
 7fe:	18 06       	cpc	r1, r24
 800:	99 1f       	adc	r25, r25
 802:	f1 cf       	rjmp	.-30     	; 0x7e6 <__fp_splitA+0xc>
 804:	86 95       	lsr	r24
 806:	71 05       	cpc	r23, r1
 808:	61 05       	cpc	r22, r1
 80a:	08 94       	sec
 80c:	08 95       	ret

0000080e <__fp_zero>:
 80e:	e8 94       	clt

00000810 <__fp_szero>:
 810:	bb 27       	eor	r27, r27
 812:	66 27       	eor	r22, r22
 814:	77 27       	eor	r23, r23
 816:	cb 01       	movw	r24, r22
 818:	97 f9       	bld	r25, 7
 81a:	08 95       	ret

0000081c <__mulsf3>:
 81c:	0e 94 21 04 	call	0x842	; 0x842 <__mulsf3x>
 820:	0c 94 92 04 	jmp	0x924	; 0x924 <__fp_round>
 824:	0e 94 84 04 	call	0x908	; 0x908 <__fp_pscA>
 828:	38 f0       	brcs	.+14     	; 0x838 <__mulsf3+0x1c>
 82a:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_pscB>
 82e:	20 f0       	brcs	.+8      	; 0x838 <__mulsf3+0x1c>
 830:	95 23       	and	r25, r21
 832:	11 f0       	breq	.+4      	; 0x838 <__mulsf3+0x1c>
 834:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_inf>
 838:	0c 94 81 04 	jmp	0x902	; 0x902 <__fp_nan>
 83c:	11 24       	eor	r1, r1
 83e:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>

00000842 <__mulsf3x>:
 842:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_split3>
 846:	70 f3       	brcs	.-36     	; 0x824 <__mulsf3+0x8>

00000848 <__mulsf3_pse>:
 848:	95 9f       	mul	r25, r21
 84a:	c1 f3       	breq	.-16     	; 0x83c <__mulsf3+0x20>
 84c:	95 0f       	add	r25, r21
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	55 1f       	adc	r21, r21
 852:	62 9f       	mul	r22, r18
 854:	f0 01       	movw	r30, r0
 856:	72 9f       	mul	r23, r18
 858:	bb 27       	eor	r27, r27
 85a:	f0 0d       	add	r31, r0
 85c:	b1 1d       	adc	r27, r1
 85e:	63 9f       	mul	r22, r19
 860:	aa 27       	eor	r26, r26
 862:	f0 0d       	add	r31, r0
 864:	b1 1d       	adc	r27, r1
 866:	aa 1f       	adc	r26, r26
 868:	64 9f       	mul	r22, r20
 86a:	66 27       	eor	r22, r22
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	66 1f       	adc	r22, r22
 872:	82 9f       	mul	r24, r18
 874:	22 27       	eor	r18, r18
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	62 1f       	adc	r22, r18
 87c:	73 9f       	mul	r23, r19
 87e:	b0 0d       	add	r27, r0
 880:	a1 1d       	adc	r26, r1
 882:	62 1f       	adc	r22, r18
 884:	83 9f       	mul	r24, r19
 886:	a0 0d       	add	r26, r0
 888:	61 1d       	adc	r22, r1
 88a:	22 1f       	adc	r18, r18
 88c:	74 9f       	mul	r23, r20
 88e:	33 27       	eor	r19, r19
 890:	a0 0d       	add	r26, r0
 892:	61 1d       	adc	r22, r1
 894:	23 1f       	adc	r18, r19
 896:	84 9f       	mul	r24, r20
 898:	60 0d       	add	r22, r0
 89a:	21 1d       	adc	r18, r1
 89c:	82 2f       	mov	r24, r18
 89e:	76 2f       	mov	r23, r22
 8a0:	6a 2f       	mov	r22, r26
 8a2:	11 24       	eor	r1, r1
 8a4:	9f 57       	subi	r25, 0x7F	; 127
 8a6:	50 40       	sbci	r21, 0x00	; 0
 8a8:	9a f0       	brmi	.+38     	; 0x8d0 <__stack+0x71>
 8aa:	f1 f0       	breq	.+60     	; 0x8e8 <__stack+0x89>
 8ac:	88 23       	and	r24, r24
 8ae:	4a f0       	brmi	.+18     	; 0x8c2 <__stack+0x63>
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	bb 1f       	adc	r27, r27
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	91 50       	subi	r25, 0x01	; 1
 8be:	50 40       	sbci	r21, 0x00	; 0
 8c0:	a9 f7       	brne	.-22     	; 0x8ac <__stack+0x4d>
 8c2:	9e 3f       	cpi	r25, 0xFE	; 254
 8c4:	51 05       	cpc	r21, r1
 8c6:	80 f0       	brcs	.+32     	; 0x8e8 <__stack+0x89>
 8c8:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_inf>
 8cc:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	e4 f3       	brlt	.-8      	; 0x8cc <__stack+0x6d>
 8d4:	98 3e       	cpi	r25, 0xE8	; 232
 8d6:	d4 f3       	brlt	.-12     	; 0x8cc <__stack+0x6d>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	f7 95       	ror	r31
 8e2:	e7 95       	ror	r30
 8e4:	9f 5f       	subi	r25, 0xFF	; 255
 8e6:	c1 f7       	brne	.-16     	; 0x8d8 <__stack+0x79>
 8e8:	fe 2b       	or	r31, r30
 8ea:	88 0f       	add	r24, r24
 8ec:	91 1d       	adc	r25, r1
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret

000008f6 <__fp_inf>:
 8f6:	97 f9       	bld	r25, 7
 8f8:	9f 67       	ori	r25, 0x7F	; 127
 8fa:	80 e8       	ldi	r24, 0x80	; 128
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	08 95       	ret

00000902 <__fp_nan>:
 902:	9f ef       	ldi	r25, 0xFF	; 255
 904:	80 ec       	ldi	r24, 0xC0	; 192
 906:	08 95       	ret

00000908 <__fp_pscA>:
 908:	00 24       	eor	r0, r0
 90a:	0a 94       	dec	r0
 90c:	16 16       	cp	r1, r22
 90e:	17 06       	cpc	r1, r23
 910:	18 06       	cpc	r1, r24
 912:	09 06       	cpc	r0, r25
 914:	08 95       	ret

00000916 <__fp_pscB>:
 916:	00 24       	eor	r0, r0
 918:	0a 94       	dec	r0
 91a:	12 16       	cp	r1, r18
 91c:	13 06       	cpc	r1, r19
 91e:	14 06       	cpc	r1, r20
 920:	05 06       	cpc	r0, r21
 922:	08 95       	ret

00000924 <__fp_round>:
 924:	09 2e       	mov	r0, r25
 926:	03 94       	inc	r0
 928:	00 0c       	add	r0, r0
 92a:	11 f4       	brne	.+4      	; 0x930 <__fp_round+0xc>
 92c:	88 23       	and	r24, r24
 92e:	52 f0       	brmi	.+20     	; 0x944 <__fp_round+0x20>
 930:	bb 0f       	add	r27, r27
 932:	40 f4       	brcc	.+16     	; 0x944 <__fp_round+0x20>
 934:	bf 2b       	or	r27, r31
 936:	11 f4       	brne	.+4      	; 0x93c <__fp_round+0x18>
 938:	60 ff       	sbrs	r22, 0
 93a:	04 c0       	rjmp	.+8      	; 0x944 <__fp_round+0x20>
 93c:	6f 5f       	subi	r22, 0xFF	; 255
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	08 95       	ret

00000946 <__tablejump2__>:
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	05 90       	lpm	r0, Z+
 94c:	f4 91       	lpm	r31, Z
 94e:	e0 2d       	mov	r30, r0
 950:	09 94       	ijmp

00000952 <__umulhisi3>:
 952:	a2 9f       	mul	r26, r18
 954:	b0 01       	movw	r22, r0
 956:	b3 9f       	mul	r27, r19
 958:	c0 01       	movw	r24, r0
 95a:	a3 9f       	mul	r26, r19
 95c:	70 0d       	add	r23, r0
 95e:	81 1d       	adc	r24, r1
 960:	11 24       	eor	r1, r1
 962:	91 1d       	adc	r25, r1
 964:	b2 9f       	mul	r27, r18
 966:	70 0d       	add	r23, r0
 968:	81 1d       	adc	r24, r1
 96a:	11 24       	eor	r1, r1
 96c:	91 1d       	adc	r25, r1
 96e:	08 95       	ret

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
